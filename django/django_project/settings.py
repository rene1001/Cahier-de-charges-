"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Charger les variables d'environnement depuis .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# CORRECTION: SECRET_KEY depuis variable d'environnement
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-DEV-ONLY-4ju2n@$f9d0c=h)_g0lbb%k9&@rf(xa$d$g$&5ri$uf)*gev^4')
if 'SECRET_KEY' not in os.environ:
    import warnings
    warnings.warn("WARNING: Using default SECRET_KEY. Set SECRET_KEY in .env for production!")

# SECURITY WARNING: don't run with debug turned on in production!
# CORRECTION: DEBUG depuis variable d'environnement
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

# Configuration pour le débogage des fichiers statiques
if DEBUG:
    import mimetypes
    mimetypes.add_type("text/css", ".css", True)
    mimetypes.add_type("application/javascript", ".js", True)

# CORRECTION: ALLOWED_HOSTS depuis variable d'environnement
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# CORRECTION: CSRF_TRUSTED_ORIGINS sécurisé
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]
if not DEBUG:
    domain = os.environ.get('DOMAIN', '')
    if domain:
        CSRF_TRUSTED_ORIGINS.append(domain)

# Configuration CORS - SÉCURISÉE
# CORRECTION: CORS_ALLOW_ALL_ORIGINS = False (problème critique #4)
CORS_ALLOW_ALL_ORIGINS = False  # JAMAIS True en production!
CORS_ALLOW_CREDENTIALS = True

# Liste des origines autorisées (stricte)
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]
if not DEBUG:
    domain = os.environ.get('DOMAIN', '')
    if domain:
        CORS_ALLOWED_ORIGINS.append(domain)

# Configuration des méthodes HTTP autorisées
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Configuration des en-têtes autorisés
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-api-key',
    'x-request-id',
    'access-control-allow-origin',
    'access-control-allow-headers',
    'access-control-allow-methods',
]

# Configuration des en-têtes exposés dans les réponses
CORS_EXPOSE_HEADERS = [
    'Content-Length',
    'Content-Type',
    'X-CSRFToken',
    'X-Requested-With',
]

# Durée de mise en cache des requêtes prévol (en secondes)
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 heures

# Configuration CSRF - SÉCURISÉE
# CORRECTION: CSRF_COOKIE_HTTPONLY = True (problème critique #6)
CSRF_COOKIE_HTTPONLY = True  # Protection XSS
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SECURE = not DEBUG  # Sécurisé uniquement en production (HTTPS)
CSRF_COOKIE_SAMESITE = 'Lax'

# Configuration des cookies de session
SESSION_COOKIE_SECURE = not DEBUG  # Sécurisé uniquement en production (HTTPS)
SESSION_COOKIE_SAMESITE = 'Lax' if DEBUG else 'None'  # 'Lax' en dev, 'None' en prod pour CORS
SESSION_COOKIE_HTTPONLY = True

# Configuration des iframes - SÉCURISÉE
# CORRECTION: X_FRAME_OPTIONS = 'DENY' (problème critique #5)
X_FRAME_OPTIONS = 'DENY'  # Protection contre Clickjacking

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'cahier_charges',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Doit être placé avant tout autre middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'cahier_charges.middleware.SubscriptionMiddleware',
]

# Configuration de WhiteNoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ALLOW_ALL_ORIGINS = True

# Clickjacking protection toujours activé
if 'django.middleware.clickjacking.XFrameOptionsMiddleware' not in MIDDLEWARE:
    MIDDLEWARE.append('django.middleware.clickjacking.XFrameOptionsMiddleware')

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# CORRECTION: PostgreSQL pour production (problème critique #7)

# Vérifier si PostgreSQL est configuré
DB_ENGINE = os.environ.get('DB_ENGINE', 'sqlite3')

if DB_ENGINE == 'postgresql' or os.environ.get('DB_PASSWORD'):
    # Configuration PostgreSQL pour production
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME', 'cahier_charges_db'),
            'USER': os.environ.get('DB_USER', 'postgres'),
            'PASSWORD': os.environ.get('DB_PASSWORD', ''),
            'HOST': os.environ.get('DB_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT', '5432'),
            'CONN_MAX_AGE': 600,  # Connection pooling
        }
    }
else:
    # SQLite pour développement uniquement
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    if not DEBUG:
        import warnings
        warnings.warn("WARNING: Using SQLite in production! Configure PostgreSQL with DB_PASSWORD in .env")

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

LANGUAGES = [
    ('en', 'English'),
    ('fr', 'Français'),
    ('es', 'Español'),
    ('pt', 'Português'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

TIME_ZONE = 'UTC'

USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'cahier_charges', 'static'),
]

# Configuration pour les finders de fichiers statiques
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Configuration pour WhiteNoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ALLOW_ALL_ORIGINS = True
WHITENOISE_AUTOREFRESH = True

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuration de la journalisation
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'cahier_charges': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Login/Logout URLs
LOGIN_URL = 'authentification'
LOGIN_REDIRECT_URL = 'mes_cahiers'
LOGOUT_REDIRECT_URL = 'index'
